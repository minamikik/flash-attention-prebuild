[tool.cibuildwheel]
build-frontend = { name = "build", args = ["--no-isolation"] }
skip = "*-musllinux_*"
# 必要な環境変数をビルド環境へ通す
environment-pass = [
  "MAX_JOBS",
  "TORCH_CUDA_ARCH_LIST",
  "TORCH_SPEC",
  "CUDA_CHANNEL",
  "FLASH_ATTN_CUDA_ARCHS",
  "NVCC_THREADS",
]
# インポートだけの簡易テスト
test-command = "python -c \"import flash_attn; print('import-ok')\""

[tool.cibuildwheel.linux]
before-all = """
curl -LsSf https://astral.sh/uv/install.sh | env UV_INSTALL_DIR=/usr/local/bin sh
"""

before-build = """
PY=$(python -c 'import sys; print(sys.executable)')
uv pip install --python "$PY" --system -U pip setuptools wheel packaging ninja psutil
uv pip install --python "$PY" --system -U "torch==$TORCH_SPEC" --index-url https://download.pytorch.org/whl/$CUDA_CHANNEL
"""

before-test = """
pip install -U pip
pip install "torch==$TORCH_SPEC" --index-url https://download.pytorch.org/whl/$CUDA_CHANNEL
"""

# libcudart を除外せずに同梱する。torch の .so と libcuda は除外。
repair-wheel-command = """
LIBTORCH=$(python -c "import os, torch; print(os.path.join(os.path.dirname(torch.__file__), 'lib'))")
export LD_LIBRARY_PATH="$LIBTORCH:/usr/local/cuda/lib64:/usr/local/cuda/targets/x86_64-linux/lib:$LD_LIBRARY_PATH"
auditwheel repair -w {dest_dir} {wheel} \
  --exclude libc10.so \
  --exclude libc10_cuda.so \
  --exclude libtorch.so \
  --exclude libtorch_cuda.so \
  --exclude libtorch_cpu.so \
  --exclude libtorch_python.so \
  --exclude libcuda.so.1
"""

[tool.cibuildwheel.windows]
before-all = '''
git config --global core.longpaths true && call "C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Auxiliary\Build\vcvarsall.bat" x64
'''

before-build = '''
uv pip install -U pip setuptools wheel packaging ninja cmake psutil && uv pip install torch==%TORCH_SPEC% --index-url https://download.pytorch.org/whl/%CUDA_CHANNEL% && uv pip install triton-windows
'''

before-test = """
uv pip install -U pip && uv pip install "torch==$TORCH_SPEC" --index-url https://download.pytorch.org/whl/$CUDA_CHANNEL && uv pip install triton-windows
"""
